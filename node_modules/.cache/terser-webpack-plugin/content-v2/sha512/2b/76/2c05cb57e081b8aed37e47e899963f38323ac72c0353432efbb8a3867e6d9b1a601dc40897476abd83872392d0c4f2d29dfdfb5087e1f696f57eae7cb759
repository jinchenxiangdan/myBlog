{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{375:function(e,t,a){\"use strict\";a.r(t);var r=a(43),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"training-tesseract-ocr-under-ubuntu-19-04\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#training-tesseract-ocr-under-ubuntu-19-04\"}},[e._v(\"#\")]),e._v(\" Training Tesseract OCR under Ubuntu 19.04\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"what-is-tesseract\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#what-is-tesseract\"}},[e._v(\"#\")]),e._v(\" What is tesseract\")]),e._v(\" \"),a(\"p\",[e._v(\"Tesseract is a open source \"),a(\"a\",{attrs:{href:\"https://en.wikipedia.org/wiki/Optical_character_recognition\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"OCR\"),a(\"OutboundLink\")],1),e._v(\" (Optical Character Recognition) engine developed by Google since 2006. Tesseract supports more than 100 languages. In my opinion, it is the best OCR engine right now.\")]),e._v(\" \"),a(\"p\",[e._v(\"However, the accuracy of recognizing Simple Chinese word is not good enough to directly be used. Thus, I decide to train it and check if the training wroks.\")]),e._v(\" \"),a(\"p\",[a(\"strong\",[e._v(\"If you are new to tesseract, please check \"),a(\"a\",{attrs:{href:\"https://github.com/tesseract-ocr/tesseract\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"this\"),a(\"OutboundLink\")],1),e._v(\" out\")])]),e._v(\" \"),a(\"h2\",{attrs:{id:\"environment\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#environment\"}},[e._v(\"#\")]),e._v(\" Environment\")]),e._v(\" \"),a(\"p\",[e._v(\"For me, I am using tesseract 4.0.0 and running on Ubuntu 19.04. This below is the \"),a(\"a\",{attrs:{href:\"https://github.com/KittyKatt/screenFetch\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"screenfetch\"),a(\"OutboundLink\")],1),e._v(\" of my system.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"                         ./+o+-       \\n                  yyyyy- -yyyyyy+      OS: Ubuntu 19.04 disco\\n               ://+//////-yyyyyyo      Kernel: x86_64 Linux 5.0.0-36-generic\\n           .++ .:/++++++/-.+sss/`      Uptime: 4d 7h 14m\\n         .:++o:  /++++++++/:--:/-      Packages: 2204\\n        o:+o+:++.`..```.-/oo+++++/     Shell: bash 5.0.3\\n       .:+o:+o/.          `+sssoo+/    Resolution: 1920x1080\\n  .++/+:+oo+o:`             /sssooo.   DE: GNOME\\n /+++//+:`oo+o               /::--:.   WM: GNOME Shell\\n \\\\+/+o+++`o++o               ++////.   WM Theme: Adwaita\\n  .++.o+++oo+:`             /dddhhh.   GTK Theme: Yaru [GTK2/3]\\n       .+.o+oo:.          `oddhhhh+    Icon Theme: Yaru\\n        \\\\+.++o+o``-````.:ohdhhhhh+     Font: Ubuntu 11\\n         `:o+++ `ohhhhhhhhyo++os:      CPU: Intel Core i7-4700HQ @ 8x 3.4GHz [52.0°C]\\n           .o:`.syhhhhhhh/.oo++o`      GPU: NVE6\\n               /osyyyyyyo++ooo+++/     RAM: 4551MiB / 7891MiB\\n                   ````` +oo+++o\\\\:    \\n                          `oo++.     \\n\\n\")])]),e._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"19\")]),a(\"br\")])]),a(\"h2\",{attrs:{id:\"sequences\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sequences\"}},[e._v(\"#\")]),e._v(\" Sequences\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"_1-install-training-tools\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-install-training-tools\"}},[e._v(\"#\")]),e._v(\" 1. Install training tools\")]),e._v(\" \"),a(\"p\",[e._v(\"Due to we are going to train tesseract, running this command to make sure your system has this tools\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-shell line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"sudo\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"apt\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"install\")]),e._v(\" libicu-dev libpango1.0-dev libcairo2-dev\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"sudo\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"apt\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"install\")]),e._v(\" libtesseract-dev\\n\")])]),e._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),a(\"br\")])]),a(\"p\",[e._v(\"For training, However did you install tesseract, you \"),a(\"strong\",[e._v(\"MUST\")]),e._v(\" clone the \"),a(\"a\",{attrs:{href:\"https://github.com/tesseract-ocr/tesseract\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"source code\"),a(\"OutboundLink\")],1),e._v(\" to your computer.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"# if you want to clone it to your current directory/tesseract, just run\\ngit clone https://github.com/tesseract-ocr/tesseract.git\\n\")])]),e._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),a(\"br\")])]),a(\"p\",[e._v(\"After you get the source code, then run \"),a(\"code\",[e._v(\"./autogen.sh\")]),e._v(\" to create 'configure' script. then you can directly run \"),a(\"code\",[e._v(\"./configure\")]),e._v(\" to check wether you can build training tools. If everything is correct, then you would see something like “Training tools can be built and installed with...”\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"_2-test-before-training\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-test-before-training\"}},[e._v(\"#\")]),e._v(\" 2. Test before training\")]),e._v(\" \"),a(\"h4\",{attrs:{id:\"data\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#data\"}},[e._v(\"#\")]),e._v(\" data\")]),e._v(\" \"),a(\"p\",[e._v(\"The data was chose 500 images(char00001.png-char00500.png) from \"),a(\"a\",{attrs:{href:\"https://github.com/mrychlik/worldly-ocr/tree/master/ChineseCharHarvesting/Chars\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"wordly-ocr/chars\"),a(\"OutboundLink\")],1),e._v(\". Then I used the merge tool in JTessBoxEditor to merge these 500 images into one tiff image. After merging, the tiff has 500 pages and each page contains one tiff image.\")]),e._v(\" \"),a(\"p\",[e._v(\"Due to the images' meta data doesn't includes dpi information. I used preview on Mac to check the images DPI is 72.\")]),e._v(\" \"),a(\"h4\",{attrs:{id:\"using-tesseract-generate-box-files\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#using-tesseract-generate-box-files\"}},[e._v(\"#\")]),e._v(\" Using tesseract generate BOX files\")]),e._v(\" \"),a(\"p\",[e._v(\"Open terminal and type in \"),a(\"code\",[e._v(\"tesseract [lang].[fontname].exp[num].tif [lang].[fontname].exp[num] -l [language] batch.nochop makebox\")]),e._v(\".\")]),e._v(\" \"),a(\"h4\",{attrs:{id:\"tesseract-testing-with-different-trained-data-chi-tra-chi-tra-vert\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tesseract-testing-with-different-trained-data-chi-tra-chi-tra-vert\"}},[e._v(\"#\")]),e._v(\" tesseract testing with different trained data (chi_tra & chi_tra_vert)\")]),e._v(\" \"),a(\"p\",[a(\"em\",[e._v(\"tesseract testing with different dpi\")]),e._v(\"\\nFirst, I've test tesseract by \"),a(\"code\",[e._v(\"tesseract chi_tra.testfont.exp0.tif chi_tra.testfont.exp0 -l chi_tra batch.nochop makebox\")]),e._v(\" then copy the box file to desktop. In this case, tesseract cannot find dpi information from metadata, so it just automatically set the dpi is 70. Secondly, I test tesseract with dpi info 72 by command \"),a(\"code\",[e._v(\"tesseract chi_tra.testfont.exp0.tif chi_tra.testfont.exp0 -l chi_tra -dpi 72 batch.nochop makebox\")]),e._v(\", and copy it to desktop. However, I checked the file by \"),a(\"code\",[e._v(\"diff\")]),e._v(\" and the two files are same. The accuracy is 128/500 = 25.6%\")]),e._v(\" \"),a(\"p\",[a(\"em\",[e._v(\"testing chi_tra_vert with different rotating in dpi 72(90 degrees & 270 degrees)\")]),e._v('\\nI used the same way to test the outputs with different trained data. In this case, the output is different. Through the statistics, I surprisingly found the accuracy is 0/500 (0%). However, the interesting thing is, it recognized the character \"一\" to be number \"1\". Thus, I think I could rotate the image to get another testing.')]),e._v(\" \"),a(\"p\",[e._v(\"However, the rotating is not lossless. Through the statistics, the accuracy of clockwise rotate 90 degrees is 6/500 (1.2%). accuracy of anti-clockwise rotate 90 is 237/500 (47.7%).\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"_3-training\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-training\"}},[e._v(\"#\")]),e._v(\" 3. Training\")]),e._v(\" \"),a(\"h4\",{attrs:{id:\"adjust-correct-data-by-using-jtessboxeditor\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#adjust-correct-data-by-using-jtessboxeditor\"}},[e._v(\"#\")]),e._v(\" Adjust/Correct data by using \"),a(\"a\",{attrs:{href:\"http://vietocr.sourceforge.net/training.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"JTessBoxEditor\"),a(\"OutboundLink\")],1)]),e._v(\" \"),a(\"p\",[e._v(\"Using JTessBoxEditor's \"),a(\"em\",[e._v(\"Merge Tiff\")]),e._v(\" to merge multiple images to one, or convert images to '.tiff' format.\")]),e._v(\" \"),a(\"p\",[e._v(\"the output tif name format should be: [lang].[fontname].exp[num].tif. In this case, num could be any number.\")]),e._v(\" \"),a(\"p\",[e._v(\"Using JTessBoxEditor's \"),a(\"em\",[e._v(\"Merge Tiff\")]),e._v(\" to merge multiple images to one, or convert images to '.tiff' format.\")]),e._v(\" \"),a(\"p\",[e._v(\"the output tif name format should be: [lang].[fontname].exp[num].tif. In this case, num could be any number.\")]),e._v(\" \"),a(\"h4\",{attrs:{id:\"generate-font-property-file\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#generate-font-property-file\"}},[e._v(\"#\")]),e._v(\" Generate font property file\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"echo font 0 0 0 0 0 >font_properties\")]),e._v(\"\\nthe properties separately mean: font name, italic bold fixed serif fraktur\")]),e._v(\" \"),a(\"h4\",{attrs:{id:\"generate-tr-training-file\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#generate-tr-training-file\"}},[e._v(\"#\")]),e._v(\" Generate .tr training file\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"tesseract chi_tra_my.font.exp0.tif chi_tra_my.font.exp0 --psm 8 --dpi 72 nobatch box.train\")])]),e._v(\" \"),a(\"h4\",{attrs:{id:\"generate-unicharset-file\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#generate-unicharset-file\"}},[e._v(\"#\")]),e._v(\" Generate unicharset file\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"unicharset_extractor chi_tra_my.font.exp0.box\")]),e._v(\"\\nAfter this step, the file ‘unicharset’ will be generated.\")]),e._v(\" \"),a(\"p\",[e._v(\"unicharset format:\\nThe first line of a unicharset file contains the number of unichars in the file. The first such line contains a placeholder reserved for the space character. Each unichar is referred to within Tesseract by its Unichar ID, which is the line number (minus 1) within the unicharset file.\")]),e._v(\" \"),a(\"h4\",{attrs:{id:\"generate-shape-file\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#generate-shape-file\"}},[e._v(\"#\")]),e._v(\" Generate “shape” file\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"shapeclustering -F font_properties -U unicharset -O chi_tra_my.unicharset chi_tra_my.font.exp0.tr\")]),e._v(\"\\nAfter this step, it would generate “shapetable” and “chi_tra_my.unicharset” files.\")]),e._v(\" \"),a(\"h4\",{attrs:{id:\"generate-poly-character-signature-files\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#generate-poly-character-signature-files\"}},[e._v(\"#\")]),e._v(\" Generate poly character signature files\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"mftraining -F font_properties -U unicharset -O chi_tra_my.unicharset chi_tra_my.font.exp0.tr\")]),e._v(\"\\nThis step would generate ‘inttemp’ and ‘pffmtable’\")]),e._v(\" \"),a(\"h4\",{attrs:{id:\"generate-character-normalization-signature-file\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#generate-character-normalization-signature-file\"}},[e._v(\"#\")]),e._v(\" Generate character normalization signature file\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"cntraining chi_tra_my.font.exp0.tr\")])]),e._v(\" \"),a(\"h4\",{attrs:{id:\"rename-inttemp-pffmtable-shapetable-and-normproto-files-to-lang\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rename-inttemp-pffmtable-shapetable-and-normproto-files-to-lang\"}},[e._v(\"#\")]),e._v(\" Rename inttemp, pffmtable, shapetable and normproto files to [lang].***\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"mv inttemp chi_tra_my.inttemp\\nmv pffmtable chi_tra_my.pffmtable\\nmv shapetable chi_tra_my.shapetable\\nmv normproto chi_tra_my.normproto\\n\")])]),e._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),a(\"br\")])]),a(\"h4\",{attrs:{id:\"combine-those-files-to-be-trained-data\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#combine-those-files-to-be-trained-data\"}},[e._v(\"#\")]),e._v(\" Combine those files to be trained data\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"combine_tessdata chi_tra_my.\")])]),e._v(\" \"),a(\"p\",[e._v(\"This step would generate the file 'chi_tra_my.traineddata'\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"test-my-trained-data\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#test-my-trained-data\"}},[e._v(\"#\")]),e._v(\" test my trained data\")]),e._v(\" \"),a(\"p\",[e._v(\"Because the auto-generated box file doesn’t have information for a few pages. When training with box files, an error will happen. To avoid it, I need to manually add information in the box file.\")]),e._v(\" \"),a(\"p\",[e._v(\"After adding the corrected information on the empty pages, I generated another box file.\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"tesseract chi_tra_my.font.exp0.tif -l chi_tra_my --psm 8 --dpi 72 batch.nochop makebox\")])]),e._v(\" \"),a(\"p\",[e._v(\"Through statistics, the accuracy is 435/500 = 87%\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"todo-combine-my-trained-data-and-official-trained-data\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#todo-combine-my-trained-data-and-official-trained-data\"}},[e._v(\"#\")]),e._v(\" TODO: combine my trained data and official trained data\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"references\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#references\"}},[e._v(\"#\")]),e._v(\" References\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"https://github.com/tesseract-ocr/tesseract\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Tesseract Source Code\"),a(\"OutboundLink\")],1)]),e._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://github.com/tesseract-ocr/tesseract/wiki/TrainingTesseract\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Tesseract Training\"),a(\"OutboundLink\")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}