{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{399:function(e,r,t){\"use strict\";t.r(r);var a=t(43),n=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"happy-number-checker\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#happy-number-checker\"}},[e._v(\"#\")]),e._v(\" Happy Number Checker\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"what-is-a-happy-number\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#what-is-a-happy-number\"}},[e._v(\"#\")]),e._v(\" What is a Happy Number?\")]),e._v(\" \"),t(\"p\",[e._v(\"In number theory, a \"),t(\"em\",[e._v(\"b-happy number\")]),e._v(\" is a natural number in a given number base \"),t(\"em\",[e._v(\"b\")]),e._v(\" that eventually reaches 1 when iterated over the perfect digital invariant function for p=2. Those numbers that do not end in 1 are b-unhappy numbers (or b-sad numbers).\")]),e._v(\" \"),t(\"p\",[e._v(\"For instance, the number 19 is a happy number because\")]),e._v(\" \"),t(\"p\",[e._v(\"$1^2 + 9^2 = 82$\")]),e._v(\" \"),t(\"p\",[e._v(\"$8^2 + 2^2 = 68$\\n$6^2 + 8^2 = 100$\\n$1^2 + 0^2 + 0^2 = 1$\")]),e._v(\" \"),t(\"h1\",{attrs:{id:\"however-20-is-not-happy-number\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#however-20-is-not-happy-number\"}},[e._v(\"#\")]),e._v(\" However, 20 is not happy number\")]),e._v(\" \"),t(\"p\",[e._v(\"$2^2 + 0^2 = 4$\\n$4^2       = 16$\\n$1^2 + 6^2 = 37$\\n...\\nand it won't stop\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"programming\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#programming\"}},[e._v(\"#\")]),e._v(\" Programming\")]),e._v(\" \"),t(\"p\",[e._v(\"This is tricky because if a number is not happy number, the checker would be running forever and won't stop. In this case, I just think\\nthe number be happy number if we compute over 1000 times and the answer is still not equal to zero.\")]),e._v(\" \"),t(\"p\",[e._v(\"Due to we want to get the square of each bit, so we could use operator \"),t(\"code\",[e._v(\"%\")]),e._v(\" to handle this.\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"references\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#references\"}},[e._v(\"#\")]),e._v(\" REFERENCES\")]),e._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://en.wikipedia.org/wiki/Happy_number\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"wikipedia\"),t(\"OutboundLink\")],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);","extractedComments":[]}