{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{371:function(s,t,n){\"use strict\";n.r(t);var a=n(43),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"python-modify-range-variable-in-for-loop\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#python-modify-range-variable-in-for-loop\"}},[s._v(\"#\")]),s._v(\" Python modify range variable in for loop\")]),s._v(\" \"),n(\"p\",[s._v(\"When I want to done a job like below, I noticed that python doesn't support modify range variable like java or c code.\")]),s._v(\" \"),n(\"div\",{staticClass:\"language-python line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-python\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# It supposed to be infinity loop\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"for\")]),s._v(\" i \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"in\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[s._v(\"range\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\":\")]),s._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"print\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'i:'\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" i\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n    i\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-=\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token triple-quoted-string string\"}},[s._v(\"'''\\noutput:\\ni: 0\\ni: 1\\ni: 2\\ni: 3\\ni: 4\\n'''\")]),s._v(\"\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\")])]),n(\"p\",[s._v(\"The reason it Python doesn't care about the currenet value of i. It runs like linked list, and using \"),n(\"code\",[s._v(\"next\")]),s._v(\" to iterate and finish the loop. Thus, this method doesn't support by Python. To do something like that, we can use a while loop like below.\")]),s._v(\" \"),n(\"div\",{staticClass:\"language-python line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-python\"}},[n(\"code\",[s._v(\"i \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"while\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"i \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\":\")]),s._v(\"\\n  \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"print\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'i:'\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"i\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n  i\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+=\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\"\\n  \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),s._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"i\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\":\")]),s._v(\"\\n    i\"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+=\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token triple-quoted-string string\"}},[s._v(\"'''\\noutput:\\ni: 0\\ni: 1\\ni: 4\\n'''\")]),s._v(\"\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\")])])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}