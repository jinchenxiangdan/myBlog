"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vuepress_shared_1 = require("@mr-hope/vuepress-shared");
const code_demo_1 = require("./markdown-it/code-demo");
const i18n_1 = require("./i18n");
const pluginConfig = (markdownOption, themeConfig) => {
    const baseLang = markdownOption.baseLang || themeConfig.baseLang || "en-US";
    const baseLangPath = vuepress_shared_1.lang2Path(baseLang);
    const resolveConfig = (titleConfig) => {
        titleConfig["/"] = titleConfig[baseLangPath];
        return titleConfig;
    };
    const config = [
        ["container", { type: "info", defaultTitle: resolveConfig(i18n_1.i18n.info) }],
        ["container", { type: "tip", defaultTitle: resolveConfig(i18n_1.i18n.tip) }],
        [
            "container",
            { type: "warning", defaultTitle: resolveConfig(i18n_1.i18n.warning) },
        ],
        ["container", { type: "danger", defaultTitle: resolveConfig(i18n_1.i18n.danger) }],
        [
            "container",
            {
                type: "details",
                before: (info) => `<details class="custom-block details"><summary>${info || "Details"}</summary>\n`,
                after: () => "</details>\n",
            },
        ],
    ];
    if (markdownOption.align || markdownOption.enableAll)
        config.push(["container", { type: "left", defaultTitle: "" }], ["container", { type: "center", defaultTitle: "" }], ["container", { type: "right", defaultTitle: "" }], ["container", { type: "justify", defaultTitle: "" }]);
    if (markdownOption.demo || markdownOption.enableAll)
        config.push(["container", { type: "demo", render: code_demo_1.codeDemoRender }]);
    return config;
};
exports.default = pluginConfig;
//# sourceMappingURL=pluginConfig.js.map